# -*- coding: utf-8 -*-
"""ANIMAL CLASSIFICATION CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c_6i69H0u09Lj4tCgll0HQixXuDtxYS6
"""

from google.colab import drive
drive.mount('/content/drive')

dataset_path = '/content/drive/MyDrive/dataset'

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
import os

img_size = (128, 128)  # You can increase for better accuracy but training is slower
batch_size = 32

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data preprocessing and augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,   # 80% train, 20% validation
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# Training data generator
train_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

# Validation data generator
val_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# Test data generator (no augmentation, only rescaling)
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    dataset_path,   # ðŸ‘ˆ replace with your test dataset folder path
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

# Now you can use train_generator, val_generator, and test_generator

num_classes = len(train_generator.class_indices)
print("Number of classes:", num_classes)
print("Class Labels:", train_generator.class_indices)

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(*img_size, 3)),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(
    train_generator,
    epochs=25,   # increase epochs for better results
    validation_data=val_generator
)

plt.plot(history.history['accuracy'], label='train_accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.legend()
plt.show()

model.save("/content/drive/MyDrive/animal_cnn_model.h5")
print("Model saved!")

from tensorflow.keras.models import load_model

# Path where you saved the model
model_path = "/content/drive/MyDrive/animal_cnn_model.h5"

# Load the trained model
loaded_model = load_model(model_path)

# Check summary to confirm
loaded_model.summary()

from tensorflow.keras.preprocessing import image

def predict_image(img_path):
    img = image.load_img(img_path, target_size=img_size)
    img_array = image.img_to_array(img)/255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)
    class_idx = np.argmax(prediction)
    class_label = list(train_generator.class_indices.keys())[class_idx]
    confidence = np.max(prediction) * 100
    print(f"Predicted: {class_label} ({confidence:.2f}% confidence)")

from tensorflow.keras.preprocessing import image
import numpy as np

def predict_image(img_path):
    img = image.load_img(img_path, target_size=(128, 128))  # same size used in training
    img_array = image.img_to_array(img)/255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = loaded_model.predict(img_array)
    class_idx = np.argmax(prediction)
    confidence = np.max(prediction) * 100
    class_label = list(train_generator.class_indices.keys())[class_idx]
    print(f"Predicted: {class_label} ({confidence:.2f}% confidence)")

# Example usage
test_img = "/content/download.jpg"
predict_image(test_img)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, fbeta_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

y_true = test_generator.classes
y_pred_proba = loaded_model.predict(test_generator)
y_pred = np.argmax(y_pred_proba, axis=1)
class_labels = list(test_generator.class_indices.keys())

# Compute metrics
print("Accuracy:", accuracy_score(y_true, y_pred))
print("Precision:", precision_score(y_true, y_pred, average='weighted'))
print("Recall:", recall_score(y_true, y_pred, average='weighted'))
print("F1 Score:", f1_score(y_true, y_pred, average='weighted'))
print("F2 Score:", fbeta_score(y_true, y_pred, beta=2, average='weighted'))

print("\nClassification Report:")
print(classification_report(y_true, y_pred, target_names=class_labels))

# Confusion matrix heatmap
cm = confusion_matrix(y_true, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# 1) save model to Drive if not already saved
from tensorflow.keras.models import load_model
import json
import os

model_path = "/content/drive/MyDrive/animal_cnn_model.h5"
loaded_model = load_model(model_path)
print("Model loaded.")

# 2) create classes.json from your training generator's .class_indices
# If you used ImageDataGenerator.flow_from_directory, you should have train_generator or similar.
# Replace 'train_generator' below with whatever object you used when training.
try:
    class_indices = train_generator.class_indices
except NameError:
    # If train_generator is not in this session, manually set it if you know. Example:
    # class_indices = {'cat':0, 'dog':1, 'elephant':2, 'lion':3}
    raise RuntimeError("train_generator not found in this Colab session. Populate class_indices manually.")

# convert to index->label mapping
index_to_label = {str(v): k for k, v in class_indices.items()}

# save to Drive (and also save a local copy)
classes_path = "/content/drive/MyDrive/classes.json"
with open(classes_path, "w") as f:
    json.dump(index_to_label, f)

# Also copy local model so you can easily download from Colab UI
local_model_copy = "/content/animal_cnn_model.h5"
if not os.path.exists(local_model_copy):
    !cp "{model_path}" "{local_model_copy}"
print("Saved classes.json and copied model to /content for download.")

